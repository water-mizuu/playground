{
    "sourceFile": "test/range_1d_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1698396755259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1698396755259,
            "name": "Commit-0",
            "content": "import \"package:test/test.dart\";\r\n\r\nimport \"../bin/data_structeur/range_1d.dart\";\r\nimport \"shared.dart\";\r\n\r\nvoid main() {\r\n  group(\"range unit\", () {\r\n    test(\"is continuous\", () {\r\n      Range range = Range.unit(3, 10);\r\n      int? previous;\r\n      for (int value in range) {\r\n        if (previous != null) {\r\n          expect(value - previous, equals(1));\r\n        }\r\n        previous = value;\r\n      }\r\n    });\r\n\r\n    test(\"is empty when invalid\", () {\r\n      Range range = Range.unit(25, 5);\r\n      expect(range, equals(Range.empty()));\r\n    });\r\n\r\n    test(\"is equal to sets\", () {\r\n      Range range = Range.unit(0, 5);\r\n      expect(range.toSet(), unorderedEquals(<int>{0, 1, 2, 3, 4}));\r\n    });\r\n\r\n    test(\"does not include the last element\", () {\r\n      Range range = Range.unit(3, 8);\r\n      expect(range.contains(8), equals(false));\r\n    });\r\n\r\n    test(\"has proper length\", () {\r\n      Range range = Range.unit(2, 6);\r\n      expect(range.length, equals(4));\r\n    });\r\n\r\n    test(\"combines properly\", () {\r\n      RangeUnit left = RangeUnit(2, 12);\r\n      RangeUnit right = RangeUnit(4, 20);\r\n      Range combination = left.combination(right);\r\n\r\n      expect(\r\n          combination,\r\n          isA<RangeUnit>()\r\n              .having((RangeUnit unit) => unit.start, \"start\", equals(2))\r\n              .having((RangeUnit unit) => unit.end, \"end\", equals(20))\r\n              .having((RangeUnit unit) => unit.length, \"length\", equals(18)));\r\n    });\r\n\r\n    group(\"computes\", () {\r\n      /// [a, b] - [c, d]\r\n\r\n      /// ---a---b----\r\n      /// -c---d------\r\n      test(\"left superior difference\", () {\r\n        Range left = Range.unit(2, 5);\r\n        Range right = Range.unit(1, 3);\r\n\r\n        expect(left - right, equals(Range.unit(3, 5)));\r\n      });\r\n\r\n      /// -a-------b---\r\n      /// ---c--d------\r\n      test(\"inferior difference\", () {\r\n        Range left = Range.unit(1, 10);\r\n        Range right = Range.unit(4, 8);\r\n\r\n        expect(left - right, equals(Range.unit(1, 4) | Range.unit(8, 10)));\r\n      });\r\n\r\n      /// -a----b----\r\n      /// ---c----d--\r\n      test(\"right-superior difference\", () {\r\n        Range left = Range.unit(2, 5);\r\n        Range right = Range.unit(4, 7);\r\n\r\n        expect(left - right, equals(Range.unit(2, 4)));\r\n      });\r\n\r\n      /// -a--b-----\r\n      /// ------c--d\r\n      test(\"right non-intersection difference\", () {\r\n        Range left = Range.unit(2, 5);\r\n        Range right = Range.unit(8, 10);\r\n\r\n        expect(left - right, equals(left));\r\n      });\r\n\r\n      /// ------a--b\r\n      /// -c--d-----\r\n      test(\"left non-intersection difference\", () {\r\n        Range left = Range.unit(8, 10);\r\n        Range right = Range.unit(2, 5);\r\n\r\n        expect(left - right, equals(left));\r\n      });\r\n\r\n      /// ---a--b---\r\n      /// --c-----d-\r\n      test(\"superior difference\", () {\r\n        Range left = Range.unit(5, 10);\r\n        Range right = Range.unit(2, 12);\r\n\r\n        expect(left - right, equals(Range.empty()));\r\n      });\r\n    });\r\n\r\n    group(\"predicates\", () {\r\n      test(\"covers\", () {\r\n        Range superior = Range.unit(3, 20);\r\n        Range inferior = Range.unit(4, 8);\r\n\r\n        expect(superior.covers(inferior), equals(true));\r\n        expect(inferior.covers(superior), equals(false));\r\n      });\r\n\r\n      test(\"intersects\", () {\r\n        Range left = Range.unit(2, 8);\r\n        Range right = Range.unit(6, 12);\r\n\r\n        expect(left.intersects(right), equals(right.intersects(left)) & equals(true));\r\n      });\r\n\r\n      test(\"contains\", () {\r\n        Range range = Range.unit(0, 100);\r\n\r\n        expect(range.contains(0), equals(true)); // Inclusive start\r\n        expect(range.contains(50), equals(true));\r\n        expect(range.contains(100), equals(false)); // Exclusive end\r\n      });\r\n    });\r\n  });\r\n\r\n  group(\"general range\", () {\r\n    test(\"unions are not covered unless full\", () {\r\n      Range lhs = Range.unit(2, 8) | Range.unit(9, 20);\r\n      Range rhs = Range.unit(3, 18);\r\n      Range lhsConnected = lhs | Range.unit(6, 10);\r\n\r\n      expect(lhs.covers(rhs), equals(false));\r\n      expect(lhsConnected.covers(rhs), equals(true));\r\n    });\r\n  });\r\n\r\n  group(\"right hand null\", () {\r\n    Range rhs = Range.empty();\r\n\r\n    test(\"unions are unchanged\", () {\r\n      Range lhs = Range.unit(4, 20);\r\n\r\n      expect(lhs | rhs, equals(lhs));\r\n      expect(rhs | lhs, equals(lhs));\r\n    });\r\n\r\n    test(\"intersections are null\", () {\r\n      Range lhs = Range.unit(2, 5);\r\n\r\n      expect(lhs & rhs, equals(rhs));\r\n      expect(rhs & lhs, equals(rhs));\r\n    });\r\n\r\n    test(\"differences are unchanged\", () {\r\n      Range lhs = Range.unit(0, 10);\r\n\r\n      expect(lhs - rhs, equals(lhs));\r\n    });\r\n  });\r\n}\r\n"
        }
    ]
}