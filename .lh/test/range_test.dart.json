{
    "sourceFile": "test/range_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1688901507780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1688901538434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,16 @@\n                 .having((RangeUnion union) => union.contains(3), \"Contains 3\", isTrue)\r\n                 .having((RangeUnion union) => union.contains(4), \"Contains 4\", isTrue)\r\n                 .having((RangeUnion union) => union.contains(2.5), \"Not before\", isFalse)\r\n                 .having((RangeUnion union) => union.contains(3.5), \"Not in between\", isFalse)\r\n-                .having((RangeUnion union) => union.contains(4.5), \"Not after\", i));\r\n+                .having((RangeUnion union) => union.contains(4.5), \"Not after\", isFalse));\r\n       });\r\n+\r\n+      test(\"toString\", () {\r\n+        Range range = Range.single(3);\r\n+\r\n+        expect(range.toString(), equals(\"{3}\"));\r\n+      });\r\n+      \r\n     });\r\n   });\r\n }\r\n"
                },
                {
                    "date": 1688901568615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n       test(\"instantiates properly\", () {\r\n         Range range = Range.single(3);\r\n \r\n         expect(range, isA<RangeSingle>());\r\n+        expect(range.v)\r\n       });\r\n \r\n       test(\"contains\", () {\r\n         Range range = Range.single(3);\r\n@@ -24,12 +25,13 @@\n         expect(range.covers(Range.single(3)), isTrue);\r\n         expect(range.covers(Range.single(4)), isFalse);\r\n       });\r\n \r\n-      test(\"has length 1\", () {\r\n+      test(\"length is valid\", () {\r\n         Range range = Range.single(3);\r\n \r\n         expect(range.length, equals(1));\r\n+        expect(range.isEmpty, isFalse);\r\n       });\r\n \r\n       test(\"intersects\", () {\r\n         Range range = Range.single(3);\r\n@@ -70,8 +72,7 @@\n         Range range = Range.single(3);\r\n \r\n         expect(range.toString(), equals(\"{3}\"));\r\n       });\r\n-      \r\n     });\r\n   });\r\n }\r\n"
                },
                {
                    "date": 1688901731958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n     group(\"single\", () {\r\n       test(\"instantiates properly\", () {\r\n         Range range = Range.single(3);\r\n \r\n-        expect(range, isA<RangeSingle>());\r\n-        expect(range.v)\r\n+        expect(range,\r\n+            isA<RangeSingle>().having((RangeSingle range) => range.value == 3, \"Value\", isTrue));\r\n       });\r\n \r\n       test(\"contains\", () {\r\n         Range range = Range.single(3);\r\n@@ -73,6 +73,7 @@\n \r\n         expect(range.toString(), equals(\"{3}\"));\r\n       });\r\n     });\r\n+    \r\n   });\r\n }\r\n"
                },
                {
                    "date": 1688901789781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,7 +73,20 @@\n \r\n         expect(range.toString(), equals(\"{3}\"));\r\n       });\r\n     });\r\n-    \r\n+\r\n+    group(\"unit\", () {\r\n+      test(\"instantiates properly\", () {\r\n+        Range range = Range.unit(3, 5);\r\n+\r\n+        expect(\r\n+            range,\r\n+            isA<RangeUnit>()\r\n+                .having((RangeUnit range) => range.start == 3, \"Start\", isTrue)\r\n+                .having((RangeUnit range) => range.end == 5, \"End\", isTrue));\r\n+      });\r\n+\r\n+      \r\n+    });\r\n   });\r\n }\r\n"
                },
                {
                    "date": 1688901827601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,12 @@\n                 .having((RangeUnit range) => range.start == 3, \"Start\", isTrue)\r\n                 .having((RangeUnit range) => range.end == 5, \"End\", isTrue));\r\n       });\r\n \r\n-      \r\n+      test(\"instantiates into empty if fully closed\", () {\r\n+        Range range = Range.unit(3, 3);\r\n+\r\n+        expect(range, isA<RangeEmpty>());\r\n+      });\r\n     });\r\n   });\r\n }\r\n"
                },
                {
                    "date": 1689174341711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,7 +90,14 @@\n         Range range = Range.unit(3, 3);\r\n \r\n         expect(range, isA<RangeEmpty>());\r\n       });\r\n+\r\n+      test(\"instantiates into single if left is open\", () {\r\n+        Range range = Range.unit(3, 3);\r\n+\r\n+        expect(range, isA<RangeEmpty>());\r\n+      });\r\n     });\r\n+    \r\n   });\r\n }\r\n"
                },
                {
                    "date": 1689174592210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,9 @@\n     group(\"single\", () {\r\n       test(\"instantiates properly\", () {\r\n         Range range = Range.single(3);\r\n \r\n-        expect(range,\r\n-            isA<RangeSingle>().having((RangeSingle range) => range.value == 3, \"Value\", isTrue));\r\n+        expect(range, isA<RangeSingle>().having((RangeSingle range) => range.value == 3, \"Value\", isTrue));\r\n       });\r\n \r\n       test(\"contains\", () {\r\n         Range range = Range.single(3);\r\n@@ -85,19 +84,19 @@\n                 .having((RangeUnit range) => range.start == 3, \"Start\", isTrue)\r\n                 .having((RangeUnit range) => range.end == 5, \"End\", isTrue));\r\n       });\r\n \r\n-      test(\"instantiates into empty if fully closed\", () {\r\n+      test(\"instantiates into empty if fully open\", () {\r\n         Range range = Range.unit(3, 3);\r\n \r\n         expect(range, isA<RangeEmpty>());\r\n       });\r\n \r\n-      test(\"instantiates into single if left is open\", () {\r\n+      test(\"instantiates into empty if only left is closed\", () {\r\n         Range range = Range.unit(3, 3);\r\n \r\n         expect(range, isA<RangeEmpty>());\r\n       });\r\n+      \r\n     });\r\n-    \r\n   });\r\n }\r\n"
                },
                {
                    "date": 1689174714463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,15 @@\n \r\n         expect(range, isA<RangeEmpty>());\r\n       });\r\n \r\n-      test(\"instantiates into empty if only left is closed\", () {\r\n+      test(\"instantiates into empty if only left is inclusive\", () {\r\n+        Range range = Range.unit(3, 3, isStartInclusive: true);\r\n+\r\n+        expect(range, isA<RangeEmpty>());\r\n+      });\r\n+\r\n+      test(\"instantiates into empty if only right is inclusive\", () {\r\n         Range range = Range.unit(3, 3);\r\n \r\n         expect(range, isA<RangeEmpty>());\r\n       });\r\n"
                },
                {
                    "date": 1689174744496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,10 @@\n                 .having((RangeUnit range) => range.start == 3, \"Start\", isTrue)\r\n                 .having((RangeUnit range) => range.end == 5, \"End\", isTrue));\r\n       });\r\n \r\n-      test(\"instantiates into empty if fully open\", () {\r\n+      group\r\n+      test(\"instantiates into empty if both are exclusive\", () {\r\n         Range range = Range.unit(3, 3);\r\n \r\n         expect(range, isA<RangeEmpty>());\r\n       });\r\n@@ -101,8 +102,13 @@\n         Range range = Range.unit(3, 3);\r\n \r\n         expect(range, isA<RangeEmpty>());\r\n       });\r\n-      \r\n+\r\n+      test(\"instantiates into single if both are inclusive\", () {\r\n+        Range range = Range.unit(3, 3, isStartInclusive: true, isEndInclusive: true);\r\n+\r\n+        expect(range, isA<RangeSingle>().having((RangeSingle range) => range.value == 3, \"Value\", isTrue));\r\n+      });\r\n     });\r\n   });\r\n }\r\n"
                },
                {
                    "date": 1698396751311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,31 +84,32 @@\n                 .having((RangeUnit range) => range.start == 3, \"Start\", isTrue)\r\n                 .having((RangeUnit range) => range.end == 5, \"End\", isTrue));\r\n       });\r\n \r\n-      group\r\n-      test(\"instantiates into empty if both are exclusive\", () {\r\n-        Range range = Range.unit(3, 3);\r\n+      group(\"with equal arguments\", () {\r\n+        test(\"instantiates into empty if both are exclusive\", () {\r\n+          Range range = Range.unit(3, 3);\r\n \r\n-        expect(range, isA<RangeEmpty>());\r\n-      });\r\n+          expect(range, isA<RangeEmpty>());\r\n+        });\r\n \r\n-      test(\"instantiates into empty if only left is inclusive\", () {\r\n-        Range range = Range.unit(3, 3, isStartInclusive: true);\r\n+        test(\"instantiates into empty if only left is inclusive\", () {\r\n+          Range range = Range.unit(3, 3, isStartInclusive: true);\r\n \r\n-        expect(range, isA<RangeEmpty>());\r\n-      });\r\n+          expect(range, isA<RangeEmpty>());\r\n+        });\r\n \r\n-      test(\"instantiates into empty if only right is inclusive\", () {\r\n-        Range range = Range.unit(3, 3);\r\n+        test(\"instantiates into empty if only right is inclusive\", () {\r\n+          Range range = Range.unit(3, 3);\r\n \r\n-        expect(range, isA<RangeEmpty>());\r\n-      });\r\n+          expect(range, isA<RangeEmpty>());\r\n+        });\r\n \r\n-      test(\"instantiates into single if both are inclusive\", () {\r\n-        Range range = Range.unit(3, 3, isStartInclusive: true, isEndInclusive: true);\r\n+        test(\"instantiates into single if both are inclusive\", () {\r\n+          Range range = Range.unit(3, 3, isStartInclusive: true, isEndInclusive: true);\r\n \r\n-        expect(range, isA<RangeSingle>().having((RangeSingle range) => range.value == 3, \"Value\", isTrue));\r\n+          expect(range, isA<RangeSingle>().having((RangeSingle range) => range.value == 3, \"Value\", isTrue));\r\n+        });\r\n       });\r\n     });\r\n   });\r\n }\r\n"
                }
            ],
            "date": 1688901507780,
            "name": "Commit-0",
            "content": "import \"package:test/test.dart\";\r\n\r\nimport \"../bin/range.dart\";\r\n\r\nvoid main() {\r\n  group(\"range\", () {\r\n    group(\"single\", () {\r\n      test(\"instantiates properly\", () {\r\n        Range range = Range.single(3);\r\n\r\n        expect(range, isA<RangeSingle>());\r\n      });\r\n\r\n      test(\"contains\", () {\r\n        Range range = Range.single(3);\r\n\r\n        expect(range.contains(3), isTrue);\r\n        expect(range.contains(4), isFalse);\r\n      });\r\n\r\n      test(\"covers\", () {\r\n        Range range = Range.single(3);\r\n\r\n        expect(range.covers(Range.single(3)), isTrue);\r\n        expect(range.covers(Range.single(4)), isFalse);\r\n      });\r\n\r\n      test(\"has length 1\", () {\r\n        Range range = Range.single(3);\r\n\r\n        expect(range.length, equals(1));\r\n      });\r\n\r\n      test(\"intersects\", () {\r\n        Range range = Range.single(3);\r\n\r\n        expect(range.intersects(Range.single(3)), isTrue);\r\n        expect(range.intersects(Range.single(4)), isFalse);\r\n      });\r\n\r\n      test(\"difference\", () {\r\n        Range range = Range.single(3);\r\n\r\n        expect(range.difference(Range.single(3)), isA<RangeEmpty>());\r\n        expect(range.difference(Range.single(4)), equals(range));\r\n      });\r\n\r\n      test(\"intersection\", () {\r\n        Range range = Range.single(3);\r\n\r\n        expect(range.intersection(Range.single(3)), equals(range));\r\n        expect(range.intersection(Range.single(4)), isA<RangeEmpty>());\r\n      });\r\n\r\n      test(\"union\", () {\r\n        Range range = Range.single(3);\r\n\r\n        expect(range.union(Range.single(3)), equals(range));\r\n        expect(\r\n            range.union(Range.single(4)),\r\n            isA<RangeUnion>()\r\n                .having((RangeUnion union) => union.contains(3), \"Contains 3\", isTrue)\r\n                .having((RangeUnion union) => union.contains(4), \"Contains 4\", isTrue)\r\n                .having((RangeUnion union) => union.contains(2.5), \"Not before\", isFalse)\r\n                .having((RangeUnion union) => union.contains(3.5), \"Not in between\", isFalse)\r\n                .having((RangeUnion union) => union.contains(4.5), \"Not after\", i));\r\n      });\r\n    });\r\n  });\r\n}\r\n"
        }
    ]
}